const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;

pub const Blk20d = struct {
    xocfxs: [jx][jy][jz][5]f32 = std.mem.zeroes([jx][jy][jz][5]f32),
    xonfxs: [jx][jy][jz][5]f32 = std.mem.zeroes([jx][jy][jz][5]f32),
    xopfxs: [jx][jy][jz][5]f32 = std.mem.zeroes([jx][jy][jz][5]f32),
    xoafxfs: [jx][jy][jz][5]f32 = std.mem.zeroes([jx][jy][jz][5]f32),
    xcofxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xchfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xoxfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xhgfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xngfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xn2fxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xn4fxw: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xn3fxw: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xnofxw: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xh2pxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xn4fxb: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xn3fxb: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xnofxb: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xh2bxb: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xnxfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xalfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xfefxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xhyfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xcafxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xmgfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xnafxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xkafxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xohfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xsofxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xclfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xc3fxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xhcfxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xal1xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xal2xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xal3xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xal4xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xalsxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xfe1xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xfe2xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xfe3xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xfe4xs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xfesxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xcaoxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xcacxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xcahxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xcasxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xmgooxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xmgcxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xmghxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xmgsxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xnacxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xnasxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xkasxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xh1pxs: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xh1bxb: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),

    pub fn init() Blk20d {
        return .{};
    }
};
