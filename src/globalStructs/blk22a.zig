const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;

pub const Blk22a = struct {
    flu: [jx][jy][jz]f32, // Fortran: FLU(JZ,JY,JX)
    hwflu: [jx][jy][jz]f32, // Fortran: HWFLU(JZ,JY,JX)
    rcoflu: [jx][jy][jz]f32, // Fortran: RCOFLU(JZ,JY,JX)
    rchflu: [jx][jy][jz]f32, // Fortran: RCHFLU(JZ,JY,JX)
    roxflu: [jx][jy][jz]f32, // Fortran: ROXFLU(JZ,JY,JX)
    rngflu: [jx][jy][jz]f32, // Fortran: RNGFLU(JZ,JY,JX)
    rn2flu: [jx][jy][jz]f32, // Fortran: RN2FLU(JZ,JY,JX)
    rn4flu: [jx][jy][jz]f32, // Fortran: RN4FLU(JZ,JY,JX)
    rn3flu: [jx][jy][jz]f32, // Fortran: RN3FLU(JZ,JY,JX)
    rnoflu: [jx][jy][jz]f32, // Fortran: RNOFLU(JZ,JY,JX)
    rh2pfu: [jx][jy][jz]f32, // Fortran: RH2PFU(JZ,JY,JX)
    rn4fbu: [jx][jy][jz]f32, // Fortran: RN4FBU(JZ,JY,JX)
    rn3fbu: [jx][jy][jz]f32, // Fortran: RN3FBU(JZ,JY,JX)
    rnofbu: [jx][jy][jz]f32, // Fortran: RNOFBU(JZ,JY,JX)
    rh2bbu: [jx][jy][jz]f32, // Fortran: RH2BBU(JZ,JY,JX)
    ralflu: [jx][jy][jz]f32, // Fortran: RALFLU(JZ,JY,JX)
    rfeflu: [jx][jy][jz]f32, // Fortran: RFEFLU(JZ,JY,JX)
    rhyflu: [jx][jy][jz]f32, // Fortran: RHYFLU(JZ,JY,JX)
    rcaflu: [jx][jy][jz]f32, // Fortran: RCAFLU(JZ,JY,JX)
    rmgflu: [jx][jy][jz]f32, // Fortran: RMGFLU(JZ,JY,JX)
    rnaflu: [jx][jy][jz]f32, // Fortran: RNAFLU(JZ,JY,JX)
    rkaflu: [jx][jy][jz]f32, // Fortran: RKAFLU(JZ,JY,JX)
    rohflu: [jx][jy][jz]f32, // Fortran: ROHFLU(JZ,JY,JX)
    rsoflu: [jx][jy][jz]f32, // Fortran: RSOFLU(JZ,JY,JX)
    rclflu: [jx][jy][jz]f32, // Fortran: RCLFLU(JZ,JY,JX)
    rc3flu: [jx][jy][jz]f32, // Fortran: RC3FLU(JZ,JY,JX)
    rhcflu: [jx][jy][jz]f32, // Fortran: RHCFLU(JZ,JY,JX)
    ral1fu: [jx][jy][jz]f32, // Fortran: RAL1FU(JZ,JY,JX)
    ral2fu: [jx][jy][jz]f32, // Fortran: RAL2FU(JZ,JY,JX)
    ral3fu: [jx][jy][jz]f32, // Fortran: RAL3FU(JZ,JY,JX)
    ral4fu: [jx][jy][jz]f32, // Fortran: RAL4FU(JZ,JY,JX)
    ralsfu: [jx][jy][jz]f32, // Fortran: RALSFU(JZ,JY,JX)
    rfe1fu: [jx][jy][jz]f32, // Fortran: RFE1FU(JZ,JY,JX)
    rfe2fu: [jx][jy][jz]f32, // Fortran: RFE2FU(JZ,JY,JX)
    rfe3fu: [jx][jy][jz]f32, // Fortran: RFE3FU(JZ,JY,JX)
    rfe4fu: [jx][jy][jz]f32, // Fortran: RFE4FU(JZ,JY,JX)
    rfesfu: [jx][jy][jz]f32, // Fortran: RFESFU(JZ,JY,JX)
    rcaofu: [jx][jy][jz]f32, // Fortran: RCAOFU(JZ,JY,JX)
    rcacfu: [jx][jy][jz]f32, // Fortran: RCACFU(JZ,JY,JX)
    rcahfu: [jx][jy][jz]f32, // Fortran: RCAHFU(JZ,JY,JX)
    rcasfu: [jx][jy][jz]f32, // Fortran: RCASFU(JZ,JY,JX)
    rmgofu: [jx][jy][jz]f32, // Fortran: RMGOFU(JZ,JY,JX)
    rmgcfu: [jx][jy][jz]f32, // Fortran: RMGCFU(JZ,JY,JX)
    rmghfu: [jx][jy][jz]f32, // Fortran: RMGHFU(JZ,JY,JX)
    rmgsfu: [jx][jy][jz]f32, // Fortran: RMGSFU(JZ,JY,JX)
    rnacfu: [jx][jy][jz]f32, // Fortran: RNACFU(JZ,JY,JX)
    rnasfu: [jx][jy][jz]f32, // Fortran: RNASFU(JZ,JY,JX)
    rkasfu: [jx][jy][jz]f32, // Fortran: RKASFU(JZ,JY,JX)
    rh0pfu: [jx][jy][jz]f32, // Fortran: RH0PFU(JZ,JY,JX)
    rh1pfu: [jx][jy][jz]f32, // Fortran: RH1PFU(JZ,JY,JX)
    rh3pfu: [jx][jy][jz]f32, // Fortran: RH3PFU(JZ,JY,JX)
    rf1pfu: [jx][jy][jz]f32, // Fortran: RF1PFU(JZ,JY,JX)
    rf2pfu: [jx][jy][jz]f32, // Fortran: RF2PFU(JZ,JY,JX)
    rc0pfu: [jx][jy][jz]f32, // Fortran: RC0PFU(JZ,JY,JX)
    rc1pfu: [jx][jy][jz]f32, // Fortran: RC1PFU(JZ,JY,JX)
    rhgflu: [jx][jy][jz]f32, // Fortran: RHGFLU(JZ,JY,JX)
    rh1bbu: [jx][jy][jz]f32, // Fortran: RH1BBU(JZ,JY,JX)

    pub fn init() Blk22a {
        return std.mem.zeroInit(Blk22a, .{});
    }
};
