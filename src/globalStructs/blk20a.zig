const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jh = jx + 1;
const jv = jy + 1;

pub const Blk20a = struct {
    xqral: [jh][jv][2][2]f32, // XQRAL(2,2,JV,JH)
    xqrfe: [jh][jv][2][2]f32, // XQRFE(2,2,JV,JH)
    xqrhy: [jh][jv][2][2]f32, // XQRHY(2,2,JV,JH)
    xqrca: [jh][jv][2][2]f32, // XQRCA(2,2,JV,JH)
    xqrmg: [jh][jv][2][2]f32, // XQRMG(2,2,JV,JH)
    xqrna: [jh][jv][2][2]f32, // XQRNA(2,2,JV,JH)
    xqrka: [jh][jv][2][2]f32, // XQRKA(2,2,JV,JH)
    xqroh: [jh][jv][2][2]f32, // XQROH(2,2,JV,JH)
    xqrso: [jh][jv][2][2]f32, // XQRSO(2,2,JV,JH)
    xqrcl: [jh][jv][2][2]f32, // XQRCL(2,2,JV,JH)
    xqrc3: [jh][jv][2][2]f32, // XQRC3(2,2,JV,JH)
    xqrhc: [jh][jv][2][2]f32, // XQRHC(2,2,JV,JH)
    xqral1: [jh][jv][2][2]f32, // XQRAL1(2,2,JV,JH)
    xqral2: [jh][jv][2][2]f32, // XQRAL2(2,2,JV,JH)
    xqral3: [jh][jv][2][2]f32, // XQRAL3(2,2,JV,JH)
    xqral4: [jh][jv][2][2]f32, // XQRAL4(2,2,JV,JH)
    xqrals: [jh][jv][2][2]f32, // XQRALS(2,2,JV,JH)
    xqrfe1: [jh][jv][2][2]f32, // XQRFE1(2,2,JV,JH)
    xqrfe2: [jh][jv][2][2]f32, // XQRFE2(2,2,JV,JH)
    xqrfe3: [jh][jv][2][2]f32, // XQRFE3(2,2,JV,JH)
    xqrfe4: [jh][jv][2][2]f32, // XQRFE4(2,2,JV,JH)
    xqrfes: [jh][jv][2][2]f32, // XQRFES(2,2,JV,JH)
    xqrcao: [jh][jv][2][2]f32, // XQRCAO(2,2,JV,JH)
    xqrcac: [jh][jv][2][2]f32, // XQRCAC(2,2,JV,JH)
    xqrcah: [jh][jv][2][2]f32, // XQRCAH(2,2,JV,JH)
    xqrcas: [jh][jv][2][2]f32, // XQRCAS(2,2,JV,JH)
    xqrmgo: [jh][jv][2][2]f32, // XQRMGO(2,2,JV,JH)
    xqrmgc: [jh][jv][2][2]f32, // XQRMGC(2,2,JV,JH)
    xqrmgh: [jh][jv][2][2]f32, // XQRMGH(2,2,JV,JH)
    xqrmgs: [jh][jv][2][2]f32, // XQRMGS(2,2,JV,JH)
    xqrnac: [jh][jv][2][2]f32, // XQRNAC(2,2,JV,JH)
    xqrnas: [jh][jv][2][2]f32, // XQRNAS(2,2,JV,JH)
    xqrkas: [jh][jv][2][2]f32, // XQRKAS(2,2,JV,JH)
    xqrh0p: [jh][jv][2][2]f32, // XQRH0P(2,2,JV,JH)
    xqrh3p: [jh][jv][2][2]f32, // XQRH3P(2,2,JV,JH)
    xqrf1p: [jh][jv][2][2]f32, // XQRF1P(2,2,JV,JH)
    xqrf2p: [jh][jv][2][2]f32, // XQRF2P(2,2,JV,JH)
    xqrc0p: [jh][jv][2][2]f32, // XQRC0P(2,2,JV,JH)
    xqrc1p: [jh][jv][2][2]f32, // XQRC1P(2,2,JV,JH)
    xqrc2p: [jh][jv][2][2]f32, // XQRC2P(2,2,JV,JH)
    xqrm1p: [jh][jv][2][2]f32, // XQRM1P(2,2,JV,JH)
    xqsal: [jh][jv][2]f32, // XQSAL(2,JV,JH)
    xqsfe: [jh][jv][2]f32, // XQSFE(2,JV,JH)
    xqshy: [jh][jv][2]f32, // XQSHY(2,JV,JH)
    xqsca: [jh][jv][2]f32, // XQSCA(2,JV,JH)
    xqsmg: [jh][jv][2]f32, // XQSMG(2,JV,JH)
    xqsna: [jh][jv][2]f32, // XQSNA(2,JV,JH)
    xqska: [jh][jv][2]f32, // XQSKA(2,JV,JH)
    xqsoh: [jh][jv][2]f32, // XQSOH(2,JV,JH)
    xqsso: [jh][jv][2]f32, // XQSSO(2,JV,JH)
    xqscl: [jh][jv][2]f32, // XQSCL(2,JV,JH)
    xqsc3: [jh][jv][2]f32, // XQSC3(2,JV,JH)
    xqshc: [jh][jv][2]f32, // XQSHC(2,JV,JH)
    xqsal1: [jh][jv][2]f32, // XQSAL1(2,JV,JH)
    xqsal2: [jh][jv][2]f32, // XQSAL2(2,JV,JH)
    xqsal3: [jh][jv][2]f32, // XQSAL3(2,JV,JH)
    xqsal4: [jh][jv][2]f32, // XQSAL4(2,JV,JH)
    xqsals: [jh][jv][2]f32, // XQSALS(2,JV,JH)
    xqsfe1: [jh][jv][2]f32, // XQSFE1(2,JV,JH)
    xqsfe2: [jh][jv][2]f32, // XQSFE2(2,JV,JH)
    xqsfe3: [jh][jv][2]f32, // XQSFE3(2,JV,JH)
    xqsfe4: [jh][jv][2]f32, // XQSFE4(2,JV,JH)
    xqsfes: [jh][jv][2]f32, // XQSFES(2,JV,JH)
    xqscao: [jh][jv][2]f32, // XQSCAO(2,JV,JH)
    xqscac: [jh][jv][2]f32, // XQSCAC(2,JV,JH)
    xqscah: [jh][jv][2]f32, // XQSCAH(2,JV,JH)
    xqscas: [jh][jv][2]f32, // XQSCAS(2,JV,JH)
    xqsmgo: [jh][jv][2]f32, // XQSMGO(2,JV,JH)
    xqsmgc: [jh][jv][2]f32, // XQSMGC(2,JV,JH)
    xqsmgh: [jh][jv][2]f32, // XQSMGH(2,JV,JH)
    xqsmgs: [jh][jv][2]f32, // XQSMGS(2,JV,JH)
    xqsnac: [jh][jv][2]f32, // XQSNAC(2,JV,JH)
    xqsnas: [jh][jv][2]f32, // XQSNAS(2,JV,JH)
    xqskas: [jh][jv][2]f32, // XQSKAS(2,JV,JH)
    xqsh0p: [jh][jv][2]f32, // XQSH0P(2,JV,JH)
    xqsh1p: [jh][jv][2]f32, // XQSH1P(2,JV,JH)
    xqsh3p: [jh][jv][2]f32, // XQSH3P(2,JV,JH)
    xqsf1p: [jh][jv][2]f32, // XQSF1P(2,JV,JH)
    xqsf2p: [jh][jv][2]f32, // XQSF2P(2,JV,JH)
    xqsc0p: [jh][jv][2]f32, // XQSC0P(2,JV,JH)
    xqsc1p: [jh][jv][2]f32, // XQSC1P(2,JV,JH)
    xqsc2p: [jh][jv][2]f32, // XQSC2P(2,JV,JH)
    xqsm1p: [jh][jv][2]f32, // XQSM1P(2,JV,JH)

    pub fn init() Blk20a {
        return std.mem.zeroInit(Blk20a, .{});
    }
};
