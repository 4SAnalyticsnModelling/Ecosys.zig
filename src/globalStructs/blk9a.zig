const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jp = config.pftmax;
const jc = config.canopymax;

pub const Blk9a = struct {
    vrnl: [jx][jy][jp][jc]f32, // Fortran: VRNL(JC,JP,JY,JX)
    vrnx: [jx][jy][jp][jc]f32, // Fortran: VRNX(JC,JP,JY,JX)
    class: [jx][jy][jp][4]f32, // Fortran: CLASS(4,JP,JY,JX)
    vcmx: [jx][jy][jp]f32, // Fortran: VCMX(JP,JY,JX)
    vomx: [jx][jy][jp]f32, // Fortran: VOMX(JP,JY,JX)
    vcmx4: [jx][jy][jp]f32, // Fortran: VCMX4(JP,JY,JX)
    xkco2: [jx][jy][jp]f32, // Fortran: XKCO2(JP,JY,JX)
    xko2: [jx][jy][jp]f32, // Fortran: XKO2(JP,JY,JX)
    xkco24: [jx][jy][jp]f32, // Fortran: XKCO24(JP,JY,JX)
    rubp: [jx][jy][jp]f32, // Fortran: RUBP(JP,JY,JX)
    pepc: [jx][jy][jp]f32, // Fortran: PEPC(JP,JY,JX)
    etmx: [jx][jy][jp]f32, // Fortran: ETMX(JP,JY,JX)
    chl: [jx][jy][jp]f32, // Fortran: CHL(JP,JY,JX)
    chl4: [jx][jy][jp]f32, // Fortran: CHL4(JP,JY,JX)
    xrni: [jx][jy][jp]f32, // Fortran: XRNI(JP,JY,JX)
    xrla: [jx][jy][jp]f32, // Fortran: XRLA(JP,JY,JX)
    ctc: [jx][jy][jp]f32, // Fortran: CTC(JP,JY,JX)
    fco2: [jx][jy][jp]f32, // Fortran: FCO2(JP,JY,JX)
    wdlf: [jx][jy][jp]f32, // Fortran: WDLF(JP,JY,JX)
    pb: [jx][jy][jp]f32, // Fortran: PB(JP,JY,JX)
    sla1: [jx][jy][jp]f32, // Fortran: SLA1(JP,JY,JX)
    ssl1: [jx][jy][jp]f32, // Fortran: SSL1(JP,JY,JX)
    snl1: [jx][jy][jp]f32, // Fortran: SNL1(JP,JY,JX)
    htc: [jx][jy][jp]f32, // Fortran: HTC(JP,JY,JX)
    sstx: [jx][jy][jp]f32, // Fortran: SSTX(JP,JY,JX)
    fnod: [jx][jy][jp]f32, // Fortran: FNOD(JP,JY,JX)
    dmlf: [jx][jy][jp]f32, // Fortran: DMLF(JP,JY,JX)
    dmshe: [jx][jy][jp]f32, // Fortran: DMSHE(JP,JY,JX)
    dmstk: [jx][jy][jp]f32, // Fortran: DMSTK(JP,JY,JX)
    dmrs: [jx][jy][jp]f32, // Fortran: DMRSV(JP,JY,JX)
    dmhs: [jx][jy][jp]f32, // Fortran: DMHSK(JP,JY,JX)
    dmea: [jx][jy][jp]f32, // Fortran: DMEAR(JP,JY,JX)
    dmgr: [jx][jy][jp]f32, // Fortran: DMGR(JP,JY,JX)
    dmrt: [jx][jy][jp]f32, // Fortran: DMRT(JP,JY,JX)
    dmnd: [jx][jy][jp]f32, // Fortran: DMND(JP,JY,JX)
    rsmx: [jx][jy][jp]f32, // Fortran: RSMX(JP,JY,JX)
    rcmx: [jx][jy][jp]f32, // Fortran: RCMX(JP,JY,JX)
    rsmh: [jx][jy][jp]f32, // Fortran: RSMH(JP,JY,JX)
    cnlf: [jx][jy][jp]f32, // Fortran: CNLF(JP,JY,JX)
    cnshe: [jx][jy][jp]f32, // Fortran: CNSHE(JP,JY,JX)
    cnstk: [jx][jy][jp]f32, // Fortran: CNSTK(JP,JY,JX)
    cnrsv: [jx][jy][jp]f32, // Fortran: CNRSV(JP,JY,JX)
    cnhsk: [jx][jy][jp]f32, // Fortran: CNHSK(JP,JY,JX)
    cnear: [jx][jy][jp]f32, // Fortran: CNEAR(JP,JY,JX)
    cngr: [jx][jy][jp]f32, // Fortran: CNGR(JP,JY,JX)
    cnrt: [jx][jy][jp]f32, // Fortran: CNRT(JP,JY,JX)
    cnnd: [jx][jy][jp]f32, // Fortran: CNND(JP,JY,JX)
    cplf: [jx][jy][jp]f32, // Fortran: CPLF(JP,JY,JX)
    cpshe: [jx][jy][jp]f32, // Fortran: CPSHE(JP,JY,JX)
    cpstk: [jx][jy][jp]f32, // Fortran: CPSTK(JP,JY,JX)
    cprsv: [jx][jy][jp]f32, // Fortran: CPRSV(JP,JY,JX)
    cphsk: [jx][jy][jp]f32, // Fortran: CPHSK(JP,JY,JX)
    cpear: [jx][jy][jp]f32, // Fortran: CPEAR(JP,JY,JX)
    cpgr: [jx][jy][jp]f32, // Fortran: CPGR(JP,JY,JX)
    cprt: [jx][jy][jp]f32, // Fortran: CPRT(JP,JY,JX)
    cpnd: [jx][jy][jp]f32, // Fortran: CPND(JP,JY,JX)
    cf: [jx][jy][jp]f32, // Fortran: CF(JP,JY,JX)
    xdl: [jx][jy][jp]f32, // Fortran: XDL(JP,JY,JX)
    xppd: [jx][jy][jp]f32, // Fortran: XPPD(JP,JY,JX)
    cfi: [jx][jy][jp]f32, // Fortran: CFI(JP,JY,JX)
    xtli: [jx][jy][jp]f32, // Fortran: XTLI(JP,JY,JX)
    osmo: [jx][jy][jp]f32, // Fortran: OSMO(JP,JY,JX)
    rcs: [jx][jy][jp]f32, // Fortran: RCS(JP,JY,JX)
    stmx: [jx][jy][jp]f32, // Fortran: STMX(JP,JY,JX)
    sdmx: [jx][jy][jp]f32, // Fortran: SDMX(JP,JY,JX)
    grmx: [jx][jy][jp]f32, // Fortran: GRMX(JP,JY,JX)
    ppz: [jx][jy][jp]f32, // Fortran: PPZ(JP,JY,JX)
    grdm: [jx][jy][jp]f32, // Fortran: GRDM(JP,JY,JX)
    gfill: [jx][jy][jp]f32, // Fortran: GFILL(JP,JY,JX)
    sdpthi: [jx][jy][jp]f32, // Fortran: SDPTHI(JP,JY,JX)
    cfx: [jx][jy][jp]f32, // Fortran: CFX(JP,JY,JX)

    pub fn init() Blk9a {
        return std.mem.zeroInit(Blk9a, .{});
    }
};
