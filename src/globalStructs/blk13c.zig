const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;
const jp = config.pftmax;
const offset: u32 = 1;

pub const Blk13c = struct {
    cfosc: [jx][jy][jz + offset][5][4]f32, // Fortran: CFOSC(4,0:4,0:JZ,JY,JX)
    cnosc: [jx][jy][jz + offset][5][4]f32, // Fortran: CNOSC(4,0:4,0:JZ,JY,JX)
    cposc: [jx][jy][jz + offset][5][4]f32, // Fortran: CPOSC(4,0:4,0:JZ,JY,JX)
    rinho: [jx][jy][jz + offset][6][7]f32, // Fortran: RINHO(7,0:5,0:JZ,JY,JX)
    rinoo: [jx][jy][jz + offset][6][7]f32, // Fortran: RINOO(7,0:5,0:JZ,JY,JX)
    ripoo: [jx][jy][jz + offset][6][7]f32, // Fortran: RIPOO(7,0:5,0:JZ,JY,JX)
    rvmb2: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMB2(7,0:5,0:JZ,JY,JX)
    rvmb3: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMB3(7,0:5,0:JZ,JY,JX)
    rvmb4: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMB4(7,0:5,0:JZ,JY,JX)
    rvmx1: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMX1(7,0:5,0:JZ,JY,JX)
    rvmx2: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMX2(7,0:5,0:JZ,JY,JX)
    rvmx3: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMX3(7,0:5,0:JZ,JY,JX)
    rvmx4: [jx][jy][jz + offset][6][7]f32, // Fortran: RVMX4(7,0:5,0:JZ,JY,JX)
    rinob: [jx][jy][jz + offset][6][7]f32, // Fortran: RINOB(7,0:5,0:JZ,JY,JX)
    ripbo: [jx][jy][jz + offset][6][7]f32, // Fortran: RIPBO(7,0:5,0:JZ,JY,JX)
    ripo1: [jx][jy][jz + offset][6][7]f32, // Fortran: RIPO1(7,0:5,0:JZ,JY,JX)
    ripb1: [jx][jy][jz + offset][6][7]f32, // Fortran: RIPB1(7,0:5,0:JZ,JY,JX)
    rinoor: [jx][jy][6][7]f32, // Fortran: RINOOR(7,0:5,JY,JX)
    rinhor: [jx][jy][6][7]f32, // Fortran: RINHOR(7,0:5,JY,JX)
    ripoor: [jx][jy][6][7]f32, // Fortran: RIPOOR(7,0:5,JY,JX)
    ripo1r: [jx][jy][6][7]f32, // Fortran: RIPO1R(7,0:5,JY,JX)
    xoqcs: [jx][jy][jz + offset][5]f32, // Fortran: XOQCS(0:4,0:JZ,JY,JX)
    xoqns: [jx][jy][jz + offset][5]f32, // Fortran: XOQNS(0:4,0:JZ,JY,JX)
    xoqps: [jx][jy][jz + offset][5]f32, // Fortran: XOQPS(0:4,0:JZ,JY,JX)
    xoqas: [jx][jy][jz + offset][5]f32, // Fortran: XOQAS(0:4,0:JZ,JY,JX)
    xnh4s: [jx][jy][jz + offset]f32, // Fortran: XNH4S(0:JZ,JY,JX)
    xno3s: [jx][jy][jz + offset]f32, // Fortran: XNO3S(0:JZ,JY,JX)
    xh2ps: [jx][jy][jz + offset]f32, // Fortran: XH2PS(0:JZ,JY,JX)
    xnh4b: [jx][jy][jz + offset]f32, // Fortran: XNH4B(0:JZ,JY,JX)
    xno3b: [jx][jy][jz + offset]f32, // Fortran: XNO3B(0:JZ,JY,JX)
    xn2gs: [jx][jy][jz + offset]f32, // Fortran: XN2GS(0:JZ,JY,JX)
    xh2bs: [jx][jy][jz + offset]f32, // Fortran: XH2BS(0:JZ,JY,JX)
    vlnh4: [jx][jy][jz + offset]f32, // Fortran: VLNH4(0:JZ,JY,JX)
    vlnhb: [jx][jy][jz + offset]f32, // Fortran: VLNHB(0:JZ,JY,JX)
    vlno3: [jx][jy][jz + offset]f32, // Fortran: VLNO3(0:JZ,JY,JX)
    vlnob: [jx][jy][jz + offset]f32, // Fortran: VLNOB(0:JZ,JY,JX)
    vlpo4: [jx][jy][jz + offset]f32, // Fortran: VLPO4(0:JZ,JY,JX)
    vlpob: [jx][jy][jz + offset]f32, // Fortran: VLPOB(0:JZ,JY,JX)
    rvmxc: [jx][jy][jz + offset]f32, // Fortran: RVMXC(0:JZ,JY,JX)
    xh1ps: [jx][jy][jz + offset]f32, // Fortran: XH1PS(0:JZ,JY,JX)
    epoc: [jx][jy][jz + offset]f32, // Fortran: EPOC(0:JZ,JY,JX)
    ehum: [jx][jy][jz + offset]f32, // Fortran: EHUM(0:JZ,JY,JX)
    xh1bs: [jx][jy][jz + offset]f32, // Fortran: XH1BS(0:JZ,JY,JX)
    rvmbc: [jx][jy][jz + offset]f32, // Fortran: RVMBC(0:JZ,JY,JX)
    xzhys: [jx][jy][jz + offset]f32, // Fortran: XZHYS(0:JZ,JY,JX)
    h2gg: [jx][jy][jz]f32, // Fortran: H2GG(JZ,JY,JX)
    h2gsh: [jx][jy][jz]f32, // Fortran: H2GSH(JZ,JY,JX)
    xcobbl: [jx][jy][jz]f32, // Fortran: XCOBBL(JZ,JY,JX)
    xchbbl: [jx][jy][jz]f32, // Fortran: XCHBBL(JZ,JY,JX)
    xoxbbl: [jx][jy][jz]f32, // Fortran: XOXBBL(JZ,JY,JX)
    xngbbl: [jx][jy][jz]f32, // Fortran: XNGBBL(JZ,JY,JX)
    xn2bbl: [jx][jy][jz]f32, // Fortran: XN2BBL(JZ,JY,JX)
    xn3bbl: [jx][jy][jz]f32, // Fortran: XN3BBL(JZ,JY,JX)
    xnbbbl: [jx][jy][jz]f32, // Fortran: XNBBBL(JZ,JY,JX)
    xhgbbl: [jx][jy][jz]f32, // Fortran: XHGBBL(JZ,JY,JX)
    xcodfr: [jx][jy]f32, // Fortran: XCODFR(JY,JX)
    xchdfr: [jx][jy]f32, // Fortran: XCHDFR(JY,JX)
    xoxdfr: [jx][jy]f32, // Fortran: XOXDFR(JY,JX)
    xngdfr: [jx][jy]f32, // Fortran: XNGDFR(JY,JX)
    xn2dfr: [jx][jy]f32, // Fortran: XN2DFR(JY,JX)
    xn3dfr: [jx][jy]f32, // Fortran: XN3DFR(JY,JX)
    xhgdfr: [jx][jy]f32, // Fortran: XHGDFR(JY,JX)
    dpnh4: [jx][jy]f32, // Fortran: DPNH4(JY,JX)
    dpno3: [jx][jy]f32, // Fortran: DPNO3(JY,JX)
    dppo4: [jx][jy]f32, // Fortran: DPPO4(JY,JX)
    fl: [2]f32, // Fortran: FL(2)

    pub fn init() Blk13c {
        return std.mem.zeroInit(Blk13c, .{});
    }
};
