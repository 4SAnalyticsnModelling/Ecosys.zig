const std = @import("std");

pub const Blkc = struct {
    drad: comptime [12]f32 = std.mem.zeroes([12]f32),
    dtmpx: comptime [12]f32 = std.mem.zeroes([12]f32),
    dtmpn: comptime [12]f32 = std.mem.zeroes([12]f32),
    dhum: comptime [12]f32 = std.mem.zeroes([12]f32),
    dprec: comptime [12]f32 = std.mem.zeroes([12]f32),
    dirri: comptime [12]f32 = std.mem.zeroes([12]f32),
    dwind: comptime [12]f32 = std.mem.zeroes([12]f32),
    dco2e: comptime [12]f32 = std.mem.zeroes([12]f32),
    dcn4r: comptime [12]f32 = std.mem.zeroes([12]f32),
    dcnor: comptime [12]f32 = std.mem.zeroes([12]f32),
    tdiri: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdtpx: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdtpn: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdrad: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdhum: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdprc: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdwnd: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdco2: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdcn4: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdcno: comptime [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tarea: comptime f32 = 0.0,
    xcorp: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zero: comptime f32 = 0.0,
    zero2: comptime f32 = 0.0,
    zeros: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zerop: comptime [jx][jy][jp]f32 = std.mem.zeroes([jx][jy][jp]f32),
    zeroq: comptime [jx][jy][jp]f32 = std.mem.zeroes([jx][jy][jp]f32),
    zerol: comptime [jx][jy][jp]f32 = std.mem.zeroes([jx][jy][jp]f32),
    xnpx: comptime f32 = 0.0,
    xnpa: comptime f32 = 0.0,
    xnpb: comptime f32 = 0.0,
    xnpc: comptime f32 = 0.0,
    xnph: comptime f32 = 0.0,
    xnpt: comptime f32 = 0.0,
    xnpg: comptime f32 = 0.0,
    xnpr: comptime f32 = 0.0,
    xnpd: comptime f32 = 0.0,
    xnps: comptime f32 = 0.0,
    xnpy: comptime f32 = 0.0,
    xnpz: comptime f32 = 0.0,
    xnpq: comptime f32 = 0.0,
    xnpv: comptime f32 = 0.0,
    alat: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    doy: comptime i32 = 0,
    dylm: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zeros2: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    iflgv: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    igo: comptime i32 = 0,
    iflgs: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ifnhb: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ifnob: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ifpob: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    iwthr: comptime [2]i32 = std.mem.zeroes([2]i32),
    idayr: comptime i32 = 0,
    iyrc: comptime i32 = 0,
    iyrr: comptime i32 = 0,
    nyr: comptime i32 = std.mem.zeroes(i32),
    iterm: comptime i32 = std.mem.zeroes(i32),
    ifin: comptime i32 = std.mem.zeroes(i32),
    isaltg: comptime i32 = std.mem.zeroes(i32),
    iersng: comptime i32 = std.mem.zeroes(i32),
    ncn: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    npx: comptime i32 = 0,
    npy: comptime i32 = 0,
    nph: comptime i32 = 0,
    npt: comptime i32 = 0,
    npg: comptime i32 = 0,
    iclm: comptime i32 = 0,
    imng: comptime i32 = 0,
    iflgw: comptime i32 = 0,
    npr: comptime i32 = 0,
    nps: comptime i32 = 0,
    jout: comptime i32 = 0,
    iout: comptime i32 = 0,
    kout: comptime i32 = 0,
    iold: comptime i32 = 0,
    ilast: comptime i32 = 0,
    irun: comptime i32 = 0,
    ibegin: comptime i32 = 0,
    istart: comptime i32 = 0,
    iend: comptime i32 = 0,
    isoil: comptime [jx][jy][jz][4]i32 = std.mem.zeroes([jx][jy][jz][4]i32),
    lyrx: comptime f32 = 0.0,
    lyrc: comptime f32 = 0.0,
    lsg: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    np: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    np0: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    iflgi: comptime [jx][jy][jp]i32 = std.mem.zeroes([jx][jy][jp]i32),
    iflgc: comptime [jx][jy][jp]i32 = std.mem.zeroes([jx][jy][jp]i32),
    ietyp: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),

    pub fn init() Blkc {
        return .{};
    }
};
