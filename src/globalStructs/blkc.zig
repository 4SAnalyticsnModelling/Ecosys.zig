const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;
const jp = config.pftmax;

pub const Blkc = struct {
    drad: [12]f32 = std.mem.zeroes([12]f32),
    dtmpx: [12]f32 = std.mem.zeroes([12]f32),
    dtmpn: [12]f32 = std.mem.zeroes([12]f32),
    dhum: [12]f32 = std.mem.zeroes([12]f32),
    dprec: [12]f32 = std.mem.zeroes([12]f32),
    dirri: [12]f32 = std.mem.zeroes([12]f32),
    dwind: [12]f32 = std.mem.zeroes([12]f32),
    dco2e: [12]f32 = std.mem.zeroes([12]f32),
    dcn4r: [12]f32 = std.mem.zeroes([12]f32),
    dcnor: [12]f32 = std.mem.zeroes([12]f32),
    tdiri: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdtpx: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdtpn: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdrad: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdhum: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdprc: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdwnd: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdco2: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdcn4: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tdcno: [jx][jy][12]f32 = std.mem.zeroes([jx][jy][12]f32),
    tarea: f32 = 0.0,
    xcorp: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zero: f32 = 0.0,
    zero2: f32 = 0.0,
    zeros: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zerop: [jx][jy][jp]f32 = std.mem.zeroes([jx][jy][jp]f32),
    zeroq: [jx][jy][jp]f32 = std.mem.zeroes([jx][jy][jp]f32),
    zerol: [jx][jy][jp]f32 = std.mem.zeroes([jx][jy][jp]f32),
    xnpx: f32 = 0.0,
    xnpa: f32 = 0.0,
    xnpb: f32 = 0.0,
    xnpc: f32 = 0.0,
    xnph: f32 = 0.0,
    xnpt: f32 = 0.0,
    xnpg: f32 = 0.0,
    xnpr: f32 = 0.0,
    xnpd: f32 = 0.0,
    xnps: f32 = 0.0,
    xnpy: f32 = 0.0,
    xnpz: f32 = 0.0,
    xnpq: f32 = 0.0,
    xnpv: f32 = 0.0,
    alat: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    doy: i32 = 0,
    dylm: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zeros2: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    iflgv: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    igo: i32 = 0,
    iflgs: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ifnhb: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ifnob: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ifpob: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    iwthr: [2]i32 = std.mem.zeroes([2]i32),
    idayr: i32 = 0,
    iyrc: i32 = 0,
    iyrr: i32 = 0,
    nyr: i32 = std.mem.zeroes(i32),
    iterm: i32 = std.mem.zeroes(i32),
    ifin: i32 = std.mem.zeroes(i32),
    isaltg: i32 = std.mem.zeroes(i32),
    iersng: i32 = std.mem.zeroes(i32),
    ncn: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    npx: i32 = 0,
    npy: i32 = 0,
    nph: i32 = 0,
    npt: i32 = 0,
    npg: i32 = 0,
    iclm: i32 = 0,
    imng: i32 = 0,
    iflgw: i32 = 0,
    npr: i32 = 0,
    nps: i32 = 0,
    jout: i32 = 0,
    iout: i32 = 0,
    kout: i32 = 0,
    iold: i32 = 0,
    ilast: i32 = 0,
    irun: i32 = 0,
    ibegin: i32 = 0,
    istart: i32 = 0,
    iend: i32 = 0,
    isoil: [jx][jy][jz][4]i32 = std.mem.zeroes([jx][jy][jz][4]i32),
    lyrx: f32 = 0.0,
    lyrc: f32 = 0.0,
    lsg: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    np: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    np0: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    iflgi: [jx][jy][jp]i32 = std.mem.zeroes([jx][jy][jp]i32),
    iflgc: [jx][jy][jp]i32 = std.mem.zeroes([jx][jy][jp]i32),
    ietyp: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),

    pub fn init() Blkc {
        return .{};
    }
};
