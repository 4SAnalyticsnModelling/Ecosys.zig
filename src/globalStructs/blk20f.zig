const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jh = jx + 1;
const jv = jy + 1;

pub const Blk20f = struct {
    xsaner: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xsiler: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xclaer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xcecer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xaecer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnh4er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnh3er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnhuer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xno3er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnh4eb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnh3eb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnhueb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xno3eb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xn4er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnber: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xhyer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xaler: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xcaer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xmger: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xnaer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xkaer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xhcer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xal2er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xoh0er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xoh1er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xoh2er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xh1per: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xh2per: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xoh0eb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xoh1eb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xoh2eb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xh1peb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xh2peb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    paloer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pfeoer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcacer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcaser: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    palper: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pfeper: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcpder: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcpher: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcpmer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    palpeb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pfepeb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcpdeb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcphe: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    pcmeb: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xfe2er: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xseder: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    xfeer: [jh][jv][2][2]f32 = std.mem.zeroes([jh][jv][2][2]f32),
    omcer: [jh][jv][2][2][6][7][3]f32 = std.mem.zeroes([jh][jv][2][2][6][7][3]f32),
    omner: [jh][jv][2][2][6][7][3]f32 = std.mem.zeroes([jh][jv][2][2][6][7][3]f32),
    orcer: [jh][jv][2][2][5][4]f32 = std.mem.zeroes([jh][jv][2][2][5][4]f32),
    orner: [jh][jv][2][2][5][4]f32 = std.mem.zeroes([jh][jv][2][2][5][4]f32),
    orper: [jh][jv][2][2][5][4]f32 = std.mem.zeroes([jh][jv][2][2][5][4]f32),
    ohcer: [jh][jv][2][2][5]f32 = std.mem.zeroes([jh][jv][2][2][5]f32),
    ohner: [jh][jv][2][2][5]f32 = std.mem.zeroes([jh][jv][2][2][5]f32),
    ohper: [jh][jv][2][2][5]f32 = std.mem.zeroes([jh][jv][2][2][5]f32),
    ohaer: [jh][jv][2][2][5]f32 = std.mem.zeroes([jh][jv][2][2][5]f32),
    oscer: [jh][jv][2][2][5][5]f32 = std.mem.zeroes([jh][jv][2][2][5][5]f32),

    pub fn init() Blk20f {
        return .{};
    }
};
