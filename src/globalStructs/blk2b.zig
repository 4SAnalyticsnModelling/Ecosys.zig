const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;

pub const Blk2b = struct {
    phr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cn4ri: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnori: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cn4r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cn3r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnor: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cpor: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    calr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cfer: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    chyr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccar: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cmgr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnar: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ckar: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cohr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    csor: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cclr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cc3r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    chcr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cchr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cal1r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cal2r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cal3r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cal4r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    calsr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cfe1r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cfe2r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cfe3r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cfe4r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccesr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccaor: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccacr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccahr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccasr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cmgor: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cmgcr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cmghr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cmgsr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnacr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnasr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ckasr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ch0pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ch1pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ch3pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cf1pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cf2pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cc0pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cc1pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cc2pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cm1pr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ccor: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    coxr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnnr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cn2r: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    phq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cn4q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cn3q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cnoq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cpoq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    calq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cfeq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    chyq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    ccaq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cmgq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cnaq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    ckaq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cohq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    csoq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cclq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cc3q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    chcq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cal1q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cal2q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cal3q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cal4q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    calsq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cfe1q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cfe2q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cfe3q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cfe4q: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    ccesq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    cstrq: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    dens0: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cstrr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),

    pub fn init() Blk2b {
        return .{};
    }
};
