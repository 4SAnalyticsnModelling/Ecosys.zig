const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;
const jh = jx + 1;
const jv = jy + 1;
const jd = jz + 1;

pub const Blk15a = struct {
    xocfls: [jh][jv][jd + 1][3][5]f32, // Fortran: XOCFLS(0:4,3,0:JD,JV,JH)
    xonfls: [jh][jv][jd + 1][3][5]f32, // Fortran: XONFLS(0:4,3,0:JD,JV,JH)
    xoafls: [jh][jv][jd + 1][3][5]f32, // Fortran: XOAFLS(0:4,3,0:JD,JV,JH)
    xopfls: [jh][jv][jd + 1][3][5]f32, // Fortran: XOPFLS(0:4,3,0:JD,JV,JH)
    xocqrs: [jh][jv][5][2][2]f32, // Fortran: XOCQRS(0:4,2,2,JV,JH)
    xonqrs: [jh][jv][5][2][2]f32, // Fortran: XONQRS(0:4,2,2,JV,JH)
    xopqrs: [jh][jv][5][2][2]f32, // Fortran: XOPQRS(0:4,2,2,JV,JH)
    xoaqrs: [jh][jv][5][2][2]f32, // Fortran: XOAQRS(0:4,2,2,JV,JH)
    xchfls: [jh][jv][jd + 1][3]f32, // Fortran: XCHFLS(3,0:JD,JV,JH)
    xoxfls: [jh][jv][jd + 1][3]f32, // Fortran: XOXFLS(3,0:JD,JV,JH)
    xngfls: [jh][jv][jd + 1][3]f32, // Fortran: XNGFLS(3,0:JD,JV,JH)
    xn2fls: [jh][jv][jd + 1][3]f32, // Fortran: XN2FLS(3,0:JD,JV,JH)
    xhgfls: [jh][jv][jd + 1][3]f32, // Fortran: XHGFLS(3,0:JD,JV,JH)
    xn4flw: [jh][jv][jd + 1][3]f32, // Fortran: XN4FLW(3,0:JD,JV,JH)
    xn3flw: [jh][jv][jd + 1][3]f32, // Fortran: XN3FLW(3,0:JD,JV,JH)
    xnoflw: [jh][jv][jd + 1][3]f32, // Fortran: XNOFLW(3,0:JD,JV,JH)
    xh2pfs: [jh][jv][jd + 1][3]f32, // Fortran: XH2PFS(3,0:JD,JV,JH)
    xnxfls: [jh][jv][jd + 1][3]f32, // Fortran: XNXFLS(3,0:JD,JV,JH)
    xchflg: [jh][jv][jd + 1][3]f32, // Fortran: XCHFLG(3,0:JD,JV,JH)
    xh1pfs: [jh][jv][jd + 1][3]f32, // Fortran: XH1PFS(3,0:JD,JV,JH)
    xh1bfb: [jh][jv][jd + 1][3]f32, // Fortran: XH1BFB(3,0:JD,JV,JH)
    xcofls: [jh][jv][jd + 1][3]f32, // Fortran: XCOFLS(3,0:JD,JV,JH)
    xn4flb: [jh][jv][jd][3]f32, // Fortran: XN4FLB(3,JD,JV,JH)
    xn3flb: [jh][jv][jd][3]f32, // Fortran: XN3FLB(3,JD,JV,JH)
    xnoflb: [jh][jv][jd][3]f32, // Fortran: XNOFLB(3,JD,JV,JH)
    xh2bfb: [jh][jv][jd][3]f32, // Fortran: XH2BFB(3,JD,JV,JH)
    xnxflb: [jh][jv][jd][3]f32, // Fortran: XNXFLB(3,JD,JV,JH)
    xcoflg: [jh][jv][jd][3]f32, // Fortran: XCOFLG(3,JD,JV,JH)
    xoxflg: [jh][jv][jd][3]f32, // Fortran: XOXFLG(3,JD,JV,JH)
    xngflg: [jh][jv][jd][3]f32, // Fortran: XNGFLG(3,JD,JV,JH)
    xhgflg: [jh][jv][jd][3]f32, // Fortran: XHGFLG(3,JD,JV,JH)
    xn2flg: [jh][jv][jd][3]f32, // Fortran: XN2FLG(3,JD,JV,JH)
    xn3flg: [jh][jv][jd][3]f32, // Fortran: XN3FLG(3,JD,JV,JH)
    flw: [jh][jv][jd][3]f32, // Fortran: FLW(3,JD,JV,JH)
    flwh: [jh][jv][jd][3]f32, // Fortran: FLWH(3,JD,JV,JH)
    hflw: [jh][jv][jd][3]f32, // Fortran: HFLW(3,JD,JV,JH)
    xcoqrs: [jh][jv][2][2]f32, // Fortran: XCOQRS(2,2,JV,JH)
    xchqrs: [jh][jv][2][2]f32, // Fortran: XCHQRS(2,2,JV,JH)
    xoxqrs: [jh][jv][2][2]f32, // Fortran: XOXQRS(2,2,JV,JH)
    xngqrs: [jh][jv][2][2]f32, // Fortran: XNGQRS(2,2,JV,JH)
    xn2qrs: [jh][jv][2][2]f32, // Fortran: XN2QRS(2,2,JV,JH)
    xhgqrs: [jh][jv][2][2]f32, // Fortran: XHGQRS(2,2,JV,JH)
    xn4qrw: [jh][jv][2][2]f32, // Fortran: XN4QRW(2,2,JV,JH)
    xn3qrw: [jh][jv][2][2]f32, // Fortran: XN3QRW(2,2,JV,JH)
    xnoqrw: [jh][jv][2][2]f32, // Fortran: XNOQRW(2,2,JV,JH)
    xnxqrs: [jh][jv][2][2]f32, // Fortran: XNXQRS(2,2,JV,JH)
    xp4qrw: [jh][jv][2][2]f32, // Fortran: XP4QRW(2,2,JV,JH)
    xp1qrw: [jh][jv][2][2]f32, // Fortran: XP1QRW(2,2,JV,JH)
    qr: [jh][jv][2][2]f32, // Fortran: QR(2,2,JV,JH)
    hqr: [jh][jv][2][2]f32, // Fortran: HQR(2,2,JV,JH)
    xcoqss: [jh][jv][2]f32, // Fortran: XCOQSS(2,JV,JH)
    xchqss: [jh][jv][2]f32, // Fortran: XCHQSS(2,JV,JH)
    xoxqss: [jh][jv][2]f32, // Fortran: XOXQSS(2,JV,JH)
    xngqss: [jh][jv][2]f32, // Fortran: XNGQSS(2,JV,JH)
    xn2qss: [jh][jv][2]f32, // Fortran: XN2QSS(2,JV,JH)
    xn4qss: [jh][jv][2]f32, // Fortran: XN4QSS(2,JV,JH)
    xn3qss: [jh][jv][2]f32, // Fortran: XN3QSS(2,JV,JH)
    xnoqss: [jh][jv][2]f32, // Fortran: XNOQSS(2,JV,JH)
    xp4qss: [jh][jv][2]f32, // Fortran: XP4QSS(2,JV,JH)
    xp1qss: [jh][jv][2]f32, // Fortran: XP1QSS(2,JV,JH)
    qs: [jh][jv][2]f32, // Fortran: QS(2,JV,JH)
    qw: [jh][jv][2]f32, // Fortran: QW(2,JV,JH)
    qi: [jh][jv][2]f32, // Fortran: QI(2,JV,JH)
    hqs: [jh][jv][2]f32, // Fortran: HQS(2,JV,JH)
    flqrq: [jx][jy]f32, // Fortran: FLQRQ(JY,JX)
    flqri: [jx][jy]f32, // Fortran: FLQRI(JY,JX)
    flqgq: [jx][jy]f32, // Fortran: FLQGQ(JY,JX)
    flqgi: [jx][jy]f32, // Fortran: FLQGI(JY,JX)
    flwnu: [jx][jy]f32, // Fortran: FLWNU(JY,JX)
    flwxnu: [jx][jy]f32, // Fortran: FLWXNU(JY,JX)
    flwhnu: [jx][jy]f32, // Fortran: FLWHNU(JY,JX)
    hflwnu: [jx][jy]f32, // Fortran: HFLWNU(JY,JX)

    pub fn init() Blk15a {
        return std.mem.zeroInit(Blk15a, .{});
    }
};
