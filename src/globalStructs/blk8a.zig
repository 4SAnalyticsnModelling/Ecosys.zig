const std = @import("std");

pub const Blk8a = struct {
    psifc: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    psiwp: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    fmpr: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    albs: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cdepth: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    rock: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    tsed: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    bkds: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    fc: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    wp: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    scnv: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    scnh: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    csand: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    csilt: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cclay: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    fhol: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    phol: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    dhol: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    hrad: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    bkdsi: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ph: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    cec: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    aec: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    corgc: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    corgr: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    corgn: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    corgp: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cnh4: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cno3: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cpo4: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cal: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cfe: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cca: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cmg: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cna: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cka: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cso4: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ccl: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    caloh: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cfeoh: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ccaco: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ccaso: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    calpo: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ccapd: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    ccaph: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    sed: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    gkc4: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    gkch: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    gkca: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    gkcm: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    gkcn: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    gkck: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    thw: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    thi: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    rsc: comptime [jx][jy][jz + 1][3]f32 = std.mem.zeroes([jx][jy][jz + 1][3]f32),
    rsn: comptime [jx][jy][jz + 1][3]f32 = std.mem.zeroes([jx][jy][jz + 1][3]f32),
    rsp: comptime [jx][jy][jz + 1][3]f32 = std.mem.zeroes([jx][jy][jz + 1][3]f32),
    cnofc: comptime [4][2]f32 = std.mem.zeroes([4][2]f32),
    cpofc: comptime [4][2]f32 = std.mem.zeroes([4][2]f32),
    dets: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dete: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cer: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    xer: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    slope: comptime [jx][jy][4]f32 = std.mem.zeroes([jx][jy][4]f32),
    cdepthi: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    corgci: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    porosi: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    fholi: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ptdsnu: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    vls: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    nu: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    nui: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    nj: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    nk: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    nli: comptime [jh][jv]i32 = std.mem.zeroes([jh][jv]i32),
    nl: comptime [jh][jv]i32 = std.mem.zeroes([jh][jv]i32),
    isoilr: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    nhol: comptime [jx][jy][jz]i32 = std.mem.zeroes([jx][jy][jz]i32),
    num: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),

    pub fn init() Blk8a {
        return .{};
    }
};
