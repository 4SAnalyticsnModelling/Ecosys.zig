const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;

pub const Blk2a = struct {
    tmpx: [366]f32 = std.mem.zeroes([366]f32),
    tmpn: [366]f32 = std.mem.zeroes([366]f32),
    srad: [366]f32 = std.mem.zeroes([366]f32),
    rain: [366]f32 = std.mem.zeroes([366]f32),
    wind: [366]f32 = std.mem.zeroes([366]f32),
    dwpt: [366][2]f32 = std.mem.zeroes([366][2]f32),
    tmph: [366][24]f32 = std.mem.zeroes([366][24]f32),
    sradh: [366][24]f32 = std.mem.zeroes([366][24]f32),
    rainh: [366][24]f32 = std.mem.zeroes([366][24]f32),
    windh: [366][24]f32 = std.mem.zeroes([366][24]f32),
    dwpht: [366][24]f32 = std.mem.zeroes([366][24]f32),
    tca: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tka: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ua: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    vpa: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    vpk: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dyln: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dylx: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    altz: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    precu: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    precr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    precw: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    preci: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    precq: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    preca: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    gsin: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    gcos: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    gazi: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    omegag: [jx][jy][4]f32 = std.mem.zeroes([jx][jy][4]f32),
    sl: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    asp: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zs: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zd: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zr: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    zm: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    z0: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    alt: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dtbly: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rab: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rib: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ths: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dtbli: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    trad: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tamx: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tamn: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    hudx: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    hudn: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    twind: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    trai: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    thsx: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    offset: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dh: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    wdpthd: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    dv: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dtbldi: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    precd: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    precb: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    fert: [jx][jy][366][20]f32 = std.mem.zeroes([jx][jy][366][20]f32),
    fdepth: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    rrig: [jx][jy][366][24]f32 = std.mem.zeroes([jx][jy][366][24]f32),
    wdpth: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    dcorp: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    co2ei: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cco2ei: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    oxye: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    coxye: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    z2oe: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cz2oe: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    z2ge: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cz2ge: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    znh3e: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cnh3e: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ch4e: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cch4e: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    h2ge: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ch2ge: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dptht: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    altig: f32 = 0.0,
    alti: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    znoon: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    vap: f32 = 0.0,
    vaps: f32 = 0.0,
    dtblx: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    co2e: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cco2e: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rads: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rady: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    raps: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rapy: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ssin: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    ssinn: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    scos: f32 = 0.0,
    sazi: f32 = 0.0,
    tysin: f32 = 0.0,
    rchgnu: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgeu: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgsu: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgwu: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgnt: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchget: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgst: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgwt: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchqn: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchqe: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchqs: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchqw: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rchgd: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dtblg: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dptha: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rown: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rowo: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rowp: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rowi: [jx][jy][366]f32 = std.mem.zeroes([jx][jy][366]f32),
    firra: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    cirra: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dirra: [jx][jy][2]f32 = std.mem.zeroes([jx][jy][2]f32),
    xradh: [366][24]f32 = std.mem.zeroes([366][24]f32),
    dtblz: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tlex: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tshx: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tlec: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tshc: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    dpthsk: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tksd: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    tcndg: f32 = 0.0,
    dtbld: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    atcai: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rad: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    rap: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    atca: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    atcs: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    atka: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    atks: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    engyp: [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    idtbl: [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    itill: [jx][jy][366]i32 = std.mem.zeroes([jx][jy][366]i32),
    iirra: [jx][jy][4]i32 = std.mem.zeroes([jx][jy][4]i32),
    irchg: [jx][jy][2][2]i32 = std.mem.zeroes([jx][jy][2][2]i32),
    iflbh: [jx][jy][2][2]i32 = std.mem.zeroes([jx][jy][2][2]i32),

    pub fn init() Blk2a {
        return .{};
    }
};
