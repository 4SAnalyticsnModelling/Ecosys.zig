const std = @import("std");

pub const Blk8b = struct {
    albx: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    depth: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    dlyr: comptime [jx][jy][jz + 1][3]f32 = std.mem.zeroes([jx][jy][jz + 1][3]f32),
    poros: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    psl: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    fcl: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    wpl: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    psd: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    fcd: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    volx: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    voly: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    bkvl: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    srp: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    forgc: comptime f32 = 0.0,
    fvlwb: comptime f32 = 0.0,
    fch4f: comptime f32 = 0.0,
    cnrh: comptime [5]f32 = std.mem.zeroes([5]f32),
    cprh: comptime [5]f32 = std.mem.zeroes([5]f32),
    dist: comptime [jh][jv][jd][3]f32 = std.mem.zeroes([jh][jv][jd][3]f32),
    xdepth: comptime [jx][jy][jz][3]f32 = std.mem.zeroes([jx][jy][jz][3]f32),
    poroq: comptime f32 = 0.0,
    tfnd: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    fci: comptime f32 = 0.0,
    wpi: comptime f32 = 0.0,
    poros0: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    fslope: comptime [jx][jy][2]f32 = std.mem.zeroes([jx][jy][2]f32),
    psims: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    psimx: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    psimn: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    psisd: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    psimd: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    sand: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    silt: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    clay: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cdepthz: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    depthz: comptime [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    area: comptime [jx][jy][jz + 1][3]f32 = std.mem.zeroes([jx][jy][jz + 1][3]f32),
    disp: comptime [jh][jv][jd][3]f32 = std.mem.zeroes([jh][jv][jd][3]f32),
    oxkm: comptime f32 = 0.0,
    psihy: comptime f32 = 0.0,
    dlyri: comptime [jx][jy][jz + 1][3]f32 = std.mem.zeroes([jx][jy][jz + 1][3]f32),
    omci: comptime [5][4][3]f32 = std.mem.zeroes([5][4][3]f32),
    omcf: comptime [7]f32 = std.mem.zeroes([7]f32),
    omca: comptime [7]f32 = std.mem.zeroes([7]f32),
    bkvlnm: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    bkvlnu: comptime [jx][jy]f32 = std.mem.zeroes([jx][jy]f32),
    volai: comptime [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    iutyp: comptime [jx][jy]i32 = std.mem.zeroes([jx][jy]i32),
    ixtyp: comptime [jx][jy][2]i32 = std.mem.zeroes([jx][jy][2]i32),
    iyty: comptime [jx][jy][366][3]i32 = std.mem.zeroes([jx][jy][366][3]i32),

    pub fn init() Blk8b {
        return .{};
    }
};
