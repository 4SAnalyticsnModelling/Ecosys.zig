const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;

pub const Blk19b = struct {
    xoh1b: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    xoh2b: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    xh1pb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    xh2pb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    paloh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    pfeoh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    pcaco: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    pcasc: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    palpo: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pfepo: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pcapd: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pcaph: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pcapm: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    palpb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pfepb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pcpdb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    pcpmb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),
    ecnd: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cstr: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    cion: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xcec: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    xaec: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    alsgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    fesgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    hysgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    casgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    gmsgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ansgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    aksgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    ohsgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    c3sgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    hcsgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    sosgl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    clsxl: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zalh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zfeh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zhyh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zcch: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zmah: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    znah: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zkah: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zohh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zso4h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zclh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zco3h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zhco3h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zalo1h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zalo2h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zalo3h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zalo4h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zalsh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zfeo1h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zfeo2h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zfeo3h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zfeo4h: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zfesh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zcaoh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zcach: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zcahh: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    zcash: [jx][jy][jz]f32 = std.mem.zeroes([jx][jy][jz]f32),
    pcphb: [jx][jy][jz + 1]f32 = std.mem.zeroes([jx][jy][jz + 1]f32),

    pub fn init() Blk19b {
        return .{};
    }
};
