const std = @import("std");
const config = @import("config");
const jx = config.ewgridsmax;
const jy = config.nsgridsmax;
const jz = config.soillayersmax;
const js = config.snowlayersmax;
const offset: u32 = 1;

pub const Blk11a = struct {
    cndmvg: [jx][jy][jz + offset][3]f32, // Fortran: HCND(3,100,0:JZ,JY,JX), new Mualem-Van Genuchten (mvg) conductivity inEcosys.zig.
    tcs: [jx][jy][jz + offset]f32, // Fortran: TCS(0:JZ,JY,JX)
    tks: [jx][jy][jz + offset]f32, // Fortran: TKS(0:JZ,JY,JX)
    tsmx: [jx][jy][jz + offset]f32, // Fortran: TSMX(0:JZ,JY,JX)
    tsmn: [jx][jy][jz + offset]f32, // Fortran: TSMN(0:JZ,JY,JX)
    vhcp: [jx][jy][jz + offset]f32, // Fortran: VHCP(0:JZ,JY,JX)
    volw: [jx][jy][jz + offset]f32, // Fortran: VOLW(0:JZ,JY,JX)
    voli: [jx][jy][jz + offset]f32, // Fortran: VOLI(0:JZ,JY,JX)
    volp: [jx][jy][jz + offset]f32, // Fortran: VOLP(0:JZ,JY,JX)
    volt: [jx][jy][jz + offset]f32, // Fortran: VOLT(0:JZ,JY,JX)
    volti: [jx][jy][jz + offset]f32, // Fortran: VOLTI(0:JZ,JY,JX)
    thetw: [jx][jy][jz + offset]f32, // Fortran: THETW(0:JZ,JY,JX)
    theti: [jx][jy][jz + offset]f32, // Fortran: THETI(0:JZ,JY,JX)
    thtp: [jx][jy][jz + offset]f32, // Fortran: THETP(0:JZ,JY,JX)
    psism: [jx][jy][jz + offset]f32, // Fortran: PSISM(0:JZ,JY,JX)
    psist: [jx][jy][jz + offset]f32, // Fortran: PSIST(0:JZ,JY,JX)
    vola: [jx][jy][jz + offset]f32, // Fortran: VOLA(0:JZ,JY,JX)
    vhcm: [jx][jy][jz + offset]f32, // Fortran: VHCM(0:JZ,JY,JX)
    volwx: [jx][jy][jz + offset]f32, // Fortran: VOLWX(0:JZ,JY,JX)
    clsgl: [jx][jy][jz + offset]f32, // Fortran: CLSGL(0:JZ,JY,JX)
    olsgl: [jx][jy][jz + offset]f32, // Fortran: OLSGL(0:JZ,JY,JX)
    cqsgl: [jx][jy][jz + offset]f32, // Fortran: CQSGL(0:JZ,JY,JX)
    thetwz: [jx][jy][jz + offset]f32, // Fortran: THETWZ(0:JZ,JY,JX)
    thetiz: [jx][jy][jz + offset]f32, // Fortran: THETIZ(0:JZ,JY,JX)
    rscs: [jx][jy][jz]f32, // Fortran: RSCS(JZ,JY,JX)
    volwh: [jx][jy][jz]f32, // Fortran: VOLWH(JZ,JY,JX)
    volah: [jx][jy][jz]f32, // Fortran: VOLAH(JZ,JY,JX)
    cndh: [jx][jy][jz]f32, // Fortran: CNDH(JZ,JY,JX)
    cndu: [jx][jy][jz]f32, // Fortran: CNDU(JZ,JY,JX)
    stc: [jx][jy][jz]f32, // Fortran: STC(JZ,JY,JX)
    dtc: [jx][jy][jz]f32, // Fortran: DTC(JZ,JY,JX)
    finh: [jx][jy][jz]f32, // Fortran: FINH(JZ,JY,JX)
    thaw: [jx][jy][jz]f32, // Fortran: THAW(JZ,JY,JX)
    hthaw: [jx][jy][jz]f32, // Fortran: HTHAW(JZ,JY,JX)
    thawh: [jx][jy][jz]f32, // Fortran: THAWH(JZ,JY,JX)
    volih: [jx][jy][jz]f32, // Fortran: VOLIH(JZ,JY,JX)
    cgsgl: [jx][jy][jz]f32, // Fortran: CGSGL(JZ,JY,JX)
    ogsgl: [jx][jy][jz]f32, // Fortran: OGSGL(JZ,JY,JX)
    zgsgl: [jx][jy][jz]f32, // Fortran: ZGSGL(JZ,JY,JX)
    chsgl: [jx][jy][jz]f32, // Fortran: CHSGL(JZ,JY,JX)
    volsi: [jx][jy][js]f32, // Fortran: VOLSI(JS,JY,JX)
    tcw: [jx][jy][js]f32, // Fortran: TCW(JS,JY,JX)
    tkw: [jx][jy][js]f32, // Fortran: TKW(JS,JY,JX)
    vhcpw: [jx][jy][js]f32, // Fortran: VHCPW(JS,JY,JX)
    volssl: [jx][jy][js]f32, // Fortran: VOLSSL(JS,JY,JX)
    volwsl: [jx][jy][js]f32, // Fortran: VOLWSL(JS,JY,JX)
    volisl: [jx][jy][js]f32, // Fortran: VOLISL(JS,JY,JX)
    volsl: [jx][jy][js]f32, // Fortran: VOLSL(JS,JY,JX)
    denss: [jx][jy][js]f32, // Fortran: DENSS(JS,JY,JX)
    dlyrs: [jx][jy][js]f32, // Fortran: DLYRS(JS,JY,JX)
    xflww: [jx][jy][js]f32, // Fortran: XFLWW(JS,JY,JX)
    xflws: [jx][jy][js]f32, // Fortran: XFLWS(JS,JY,JX)
    xflwi: [jx][jy][js]f32, // Fortran: XFLWI(JS,JY,JX)
    xhflww: [jx][jy][js]f32, // Fortran: XHFLWW(JS,JY,JX)
    xwflxs: [jx][jy][js]f32, // Fortran: XWFLXS(JS,JY,JX)
    xwflxi: [jx][jy][js]f32, // Fortran: XWFLXI(JS,JY,JX)
    xthaww: [jx][jy][js]f32, // Fortran: XTHAWW(JS,JY,JX)
    cdpths: [jx][jy][js + 1]f32, // Fortran: CDPTHS(0:JS,JY,JX)
    volwrx: [jx][jy]f32, // Fortran: VOLWRX(JY,JX)
    bare: [jx][jy]f32, // Fortran: BARE(JY,JX)
    cvrd: [jx][jy]f32, // Fortran: CVRD(JY,JX)
    rac: [jx][jy]f32, // Fortran: RAC(JY,JX)
    volr: [jx][jy]f32, // Fortran: VOLR(JY,JX)
    volwg: [jx][jy]f32, // Fortran: VOLWG(JY,JX)
    tvolwc: [jx][jy]f32, // Fortran: TVOLWC(JY,JX)
    volss: [jx][jy]f32, // Fortran: VOLSS(JY,JX)
    volws: [jx][jy]f32, // Fortran: VOLWS(JY,JX)
    volis: [jx][jy]f32, // Fortran: VOLIS(JY,JX)
    vols: [jx][jy]f32, // Fortran: VOLS(JY,JX)
    heats: [jx][jy]f32, // Fortran: HEATS(JY,JX)
    heatv: [jx][jy]f32, // Fortran: HEATV(JY,JX)
    heath: [jx][jy]f32, // Fortran: HEATH(JY,JX)
    tevapg: [jx][jy]f32, // Fortran: TEVAPG(JY,JX)
    vhcpwx: [jx][jy]f32, // Fortran: VHCPWX(JY,JX)
    vhcprx: [jx][jy]f32, // Fortran: VHCPRX(JY,JX)
    vhcpnx: [jx][jy]f32, // Fortran: VHCPNX(JY,JX)
    fsnw: [jx][jy]f32, // Fortran: FSNW(JY,JX)
    fsnx: [jx][jy]f32, // Fortran: FSNX(JY,JX)
    volwd: [jx][jy]f32, // Fortran: VOLWD(JY,JX)
    dpths: [jx][jy]f32, // Fortran: DPTHS(JY,JX)
    flwr: [jx][jy]f32, // Fortran: FLWR(JY,JX)
    hflwr: [jx][jy]f32, // Fortran: HFLWR(JY,JX)
    tflwci: [jx][jy]f32, // Fortran: TFLWCI(JY,JX)
    tflwc: [jx][jy]f32, // Fortran: TFLWC(JY,JX)
    thrmg: [jx][jy]f32, // Fortran: THRMG(JY,JX)
    heati: [jx][jy]f32, // Fortran: HEATI(JY,JX)
    heate: [jx][jy]f32, // Fortran: HEATE(JY,JX)
    xw: f32, //Fortran XW

    pub fn init() Blk11a {
        return std.mem.zeroInit(Blk11a, .{});
    }
};
